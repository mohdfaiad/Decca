/* Extract Database software:d:\deccadb\emdata.gdb */
CREATE DATABASE "software:d:\deccadb\emdata.gdb" PAGE_SIZE 1024 
;


/* Table: EMCONTROL, Owner: JORDAN */
CREATE TABLE EMCONTROL (CONTROL_KEY INTEGER default 1
 NOT NULL,
        NEXT_SERV_NO CHAR(5) CHARACTER SET BIG_5,
        SERV_DEPT CHAR(2) CHARACTER SET BIG_5);

/* Table: EM_COMPANY, Owner: SYSDBA */
CREATE TABLE EM_COMPANY (COMPANY_ID CHAR(2) NOT NULL,
        COMPANY_NAME VARCHAR(30) CHARACTER SET BIG_5,
PRIMARY KEY (COMPANY_ID));

/* Table: EQUIPMENT, Owner: SYSDBA */
CREATE TABLE EQUIPMENT (MODEL_NO CHAR(10) CHARACTER SET BIG_5,
        DESCRIPTION VARCHAR(30) CHARACTER SET BIG_5,
        MADE_BY VARCHAR(30) CHARACTER SET BIG_5,
        LOC_NAME VARCHAR(30) CHARACTER SET BIG_5,
        PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
        STATUS CHAR(1) DEFAULT 'N'
 NOT NULL,
        COMMENT BLOB SUB_TYPE TEXT SEGMENT SIZE 80 CHARACTER SET BIG_5,
        EQUIPMENT_NO CHAR(16) NOT NULL,
        DISCARDED_DATE DATE,
        PURCHASED_DATE DATE,
        EQUIPMENT_TYPE CHAR(2) CHARACTER SET BIG_5,
        LOC_DEPT CHAR(2) CHARACTER SET BIG_5,
        ENGLISH_DESC VARCHAR(30) CHARACTER SET BIG_5,
        ORIGIN VARCHAR(15) CHARACTER SET BIG_5,
        M_C_NO VARCHAR(15) CHARACTER SET BIG_5,
        PRODUCED_DATE DATE,
        BOOKED CHAR(1) default 'Y'
,
        IMPORTED_BY CHAR(2),
        OWNED_BY CHAR(2),
        LOC_GROUP CHAR(2) CHARACTER SET BIG_5,
PRIMARY KEY (EQUIPMENT_NO));

/* Table: EQUIPMENT_PARTS, Owner: JORDAN */
CREATE TABLE EQUIPMENT_PARTS (EQUIPMENT_NO CHAR(8) CHARACTER SET BIG_5 NOT NULL,
        LINE_NO INTEGER default 0
 NOT NULL,
        DESCRIPTION VARCHAR(30) CHARACTER SET BIG_5,
        PARTS_TYPE CHAR(2) CHARACTER SET BIG_5 NOT NULL,
        MODEL_NO CHAR(10) CHARACTER SET BIG_5,
        FUNC_CODE CHAR(2) CHARACTER SET BIG_5,
        UNIT CHAR(2) CHARACTER SET BIG_5,
        PARTS_QTY INTEGER default 1
 NOT NULL,
        PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
        COMMENT BLOB SUB_TYPE TEXT SEGMENT SIZE 80 CHARACTER SET BIG_5,
PRIMARY KEY (EQUIPMENT_NO, LINE_NO));

/* Table: EQUIPMENT_TYPE, Owner: JORDAN */
CREATE TABLE EQUIPMENT_TYPE (EQUIPMENT_TYPE CHAR(2) CHARACTER SET BIG_5 NOT NULL,
        DESCRIPTION VARCHAR(10) CHARACTER SET BIG_5,
PRIMARY KEY (EQUIPMENT_TYPE));

/* Table: PARTS_FILE, Owner: JORDAN */
CREATE TABLE PARTS_FILE (PARTS_NO CHAR(8) CHARACTER SET BIG_5 NOT NULL,
        DESCRIPTION VARCHAR(30) CHARACTER SET BIG_5,
        PARTS_TYPE CHAR(2) CHARACTER SET BIG_5 NOT NULL,
        USAGE_DEPT CHAR(2) CHARACTER SET BIG_5,
        MODEL_NO CHAR(10) CHARACTER SET BIG_5,
        STATUS CHAR(1) DEFAULT 'O'
 NOT NULL,
        UNIT CHAR(2) CHARACTER SET BIG_5,
        PARTS_QTY INTEGER default 1
 NOT NULL,
        COMMENT BLOB SUB_TYPE TEXT SEGMENT SIZE 80 CHARACTER SET BIG_5,
        PHOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80,
        FUNC_CODE CHAR(2) CHARACTER SET BIG_5,
        DISCARDED_DATE DATE,
        PURCHASED_DATE DATE,
        USAGE_GROUP CHAR(2) CHARACTER SET BIG_5,
        START_DATE DATE,
PRIMARY KEY (PARTS_NO));

/* Table: PARTS_IN_OUT, Owner: JORDAN */
CREATE TABLE PARTS_IN_OUT (PARTS_NO CHAR(8) CHARACTER SET BIG_5 NOT NULL,
        IN_OUT_DATE DATE NOT NULL,
        EQUIPMENT_NO CHAR(8) CHARACTER SET BIG_5,
        IN_OUT_FLAG CHAR(1) default 'O'
 NOT NULL,
        UNIT CHAR(2) CHARACTER SET BIG_5,
        IN_QTY INTEGER DEFAULT 1
 NOT NULL,
        TO_DEPT CHAR(2) CHARACTER SET BIG_5,
        WORKER CHAR(5) CHARACTER SET BIG_5 NOT NULL,
        SER_MAN CHAR(5) CHARACTER SET BIG_5 NOT NULL,
        COMMENT BLOB SUB_TYPE TEXT SEGMENT SIZE 80 CHARACTER SET BIG_5,
        TO_GROUP CHAR(2) CHARACTER SET BIG_5,
PRIMARY KEY (PARTS_NO, IN_OUT_DATE));

/* Table: PARTS_TYPE, Owner: JORDAN */
CREATE TABLE PARTS_TYPE (PARTS_TYPE CHAR(2) CHARACTER SET BIG_5 NOT NULL,
        DESCRIPTION VARCHAR(10) CHARACTER SET BIG_5,
PRIMARY KEY (PARTS_TYPE));

/* Table: SERVICE_FILE, Owner: JORDAN */
CREATE TABLE SERVICE_FILE (SERVICE_NO CHAR(5) CHARACTER SET BIG_5 NOT NULL,
        SERV_EQP_TYPE CHAR(1) DEFAULT 'P'
 NOT NULL,
        PARTS_EQUIP_ID CHAR(8) CHARACTER SET BIG_5,
        REQUEST_DEPT CHAR(2) CHARACTER SET BIG_5 NOT NULL,
        REQUEST_DATE DATE,
        EXP_COMPL_DATE DATE,
        CREATE_DATE DATE,
        SERV_PRIORITY CHAR(1) DEFAULT 1
,
        SERVICE_SITE CHAR(1) DEFAULT 'S'
 NOT NULL,
        SUPPLIER_NO CHAR(3) CHARACTER SET BIG_5,
        STATUS CHAR(1) DEFAULT 'N'
 NOT NULL,
        REQUEST_BY CHAR(5) CHARACTER SET BIG_5 NOT NULL,
        CREATED_BY CHAR(5) CHARACTER SET BIG_5 NOT NULL,
        COMMENT BLOB SUB_TYPE TEXT SEGMENT SIZE 80 CHARACTER SET BIG_5,
        REQUEST_GROUP CHAR(2) CHARACTER SET BIG_5,
PRIMARY KEY (SERVICE_NO));

/* Table: SERVICE_LINE, Owner: JORDAN */
CREATE TABLE SERVICE_LINE (SERVICE_NO CHAR(5) CHARACTER SET BIG_5 NOT NULL,
        LINE_NO INTEGER DEFAULT 1
 NOT NULL,
        FROM_DATE DATE NOT NULL,
        TO_DATE DATE NOT NULL,
        SERVICE_TYPE CHAR(2) CHARACTER SET BIG_5 NOT NULL,
        SERVICEMAN_1 CHAR(5) CHARACTER SET BIG_5 NOT NULL,
        SERVICEMAN_2 CHAR(5) CHARACTER SET BIG_5,
        SERVICEMAN_3 CHAR(5) CHARACTER SET BIG_5,
        SUPERVISED_BY CHAR(5) CHARACTER SET BIG_5,
        COMMENT VARCHAR(15) CHARACTER SET BIG_5,
PRIMARY KEY (SERVICE_NO, LINE_NO));

/* Table: SERVICE_TYPE, Owner: JORDAN */
CREATE TABLE SERVICE_TYPE (SERVICE_TYPE CHAR(2) CHARACTER SET BIG_5 NOT NULL,
        DESCRIPTION VARCHAR(10) CHARACTER SET BIG_5,
PRIMARY KEY (SERVICE_TYPE));

/* Table: SUPPLIER, Owner: JORDAN */
CREATE TABLE SUPPLIER (SUPPLIER_NO CHAR(3) CHARACTER SET BIG_5 NOT NULL,
        CHINESE_NAME CHAR(30) CHARACTER SET BIG_5,
        ENGLISH_NAME CHAR(30) CHARACTER SET BIG_5,
        ADDRESS BLOB SUB_TYPE TEXT SEGMENT SIZE 80 CHARACTER SET BIG_5,
        CONTACT_1 VARCHAR(15) CHARACTER SET BIG_5,
        TITLE_1 VARCHAR(15) CHARACTER SET BIG_5,
        TELEPHONE_1 CHAR(8) CHARACTER SET BIG_5,
        CONTACT_2 VARCHAR(15) CHARACTER SET BIG_5,
        TITLE_2 VARCHAR(15) CHARACTER SET BIG_5,
        TELEPHONE_2 CHAR(8) CHARACTER SET BIG_5,
        FAX_NO CHAR(8) CHARACTER SET BIG_5,
        EMAIL_ADDRESS VARCHAR(25) CHARACTER SET BIG_5,
        STATUS CHAR(1) DEFAULT 'R'
,
        COMMENT BLOB SUB_TYPE TEXT SEGMENT SIZE 80 CHARACTER SET BIG_5,
PRIMARY KEY (SUPPLIER_NO));

/*  Index definitions for all user tables */
CREATE INDEX CONTR_IDX1 ON EMCONTROL(CONTROL_KEY);
CREATE INDEX PARTS_FILE_IDX1 ON PARTS_FILE(PARTS_TYPE, PARTS_NO);
CREATE INDEX SERVICE_FILE_IDX1 ON SERVICE_FILE(SERV_EQP_TYPE, SERVICE_NO);
CREATE INDEX SERVICE_FILE_IDX2 ON SERVICE_FILE(SERV_EQP_TYPE, PARTS_EQUIP_ID, SERVICE_NO);


COMMIT WORK;
SET AUTODDL OFF;
SET TERM ^ ;

/* Stored procedures */
CREATE PROCEDURE GET_SERV_OBJ_ID AS BEGIN EXIT; END ^

ALTER PROCEDURE GET_SERV_OBJ_ID (IDEPT_NO CHAR(4) CHARACTER SET BIG_5,
IOBJ_FLAG CHAR(1))
RETURNS (OEQP_PARTS_ID CHAR(16) CHARACTER SET BIG_5,
ODESCRIPTION VARCHAR(60) CHARACTER SET BIG_5)
AS 
       
               
begin
  if (IOBJ_FLAG = 'E') then
  for 
    select EQUIPMENT_NO, DESCRIPTION
      from EQUIPMENT
    where (LOC_DEPT = :IDEPT_NO or (loc_dept is null))
         and status = 'N' 
    order by equipment_no
      into :oEQP_PARTS_ID, :oDESCRIPTION
   do
   begin
    suspend;
   end
  if (IOBJ_FLAG = 'P') then
  for 
    select PARTS_NO, DESCRIPTION
      from PARTS_FILE
    where (USAGE_DEPT = :IDEPT_NO or (usage_dept is null))
         and status = 'N'
    order by parts_no
      into :oEQP_PARTS_ID, :oDESCRIPTION
   do
   begin
    suspend;
   end
end
 ^
SET TERM ; ^
COMMIT WORK ;
SET AUTODDL ON;
SET TERM ^ ;

/* Triggers only will work for SQL triggers */
CREATE TRIGGER SUPPLIER_UPDATE FOR SUPPLIER                        
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  if (new.Supplier_No <> old.Supplier_No) then
    update service_file
      set Supplier_No = new.Supplier_No
      where Supplier_No = old.Supplier_No;
end
 ^
CREATE TRIGGER SERVICE_FILE_INSERT FOR SERVICE_FILE                    
ACTIVE AFTER INSERT POSITION 0 
as
begin
  update emControl
    set next_serv_no = service_no + 1;
end
 ^
CREATE TRIGGER EQUIPMENT_TYPE_UPDATE FOR EQUIPMENT_TYPE                  
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  IF (NEW.EQUIPMENT_TYPE <> OLD.EQUIPMENT_TYPE) THEN
    update EQUIPMENT
      set equipment_type = NEW.equipment_type
      where equipment_type = old.equipment_type;
end
 ^
CREATE TRIGGER SERV_FILE_DELETE FOR SERVICE_FILE                    
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  delete from Service_Line
    where Service_No = old.Service_No;
end
 ^
CREATE TRIGGER PARTS_TYPE_UPDATE FOR PARTS_TYPE                      
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  IF (new.parts_type <> old.parts_type) THEN
  begin
    update equipment_parts
      set parts_type = new.parts_type
      where parts_type = old.parts_type;
    update parts_file
      set parts_type = new.parts_type
      where parts_type = old.parts_type;
  end 
end
 ^
CREATE TRIGGER SERVICE_TYPE_UPDATE FOR SERVICE_TYPE                    
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  IF (new.service_type <> old.service_type) THEN
    update service_line
      set service_type = new.service_type
      where service_type = old.service_type;
end
 ^
CREATE TRIGGER PARTS_FILE_UPDATE FOR PARTS_FILE                      
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  if (new.parts_no <> old.parts_no) then
  begin
    update parts_in_out
      set parts_no = new.parts_no
      where parts_no = old.parts_no;
    update service_file
      set parts_equip_id = new.parts_no
      where parts_equip_id = old.parts_no
        and serv_eqp_type = 'P';
  end
end
 ^
CREATE TRIGGER SERV_FILE_UPDATE FOR SERVICE_FILE                    
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  if (new.Service_No <> old.Service_No) then
    update Service_Line
      set Service_No = new.Service_No
      where Service_No = old.Service_No;
end
 ^
CREATE TRIGGER EQUIPMENT_DELETE FOR EQUIPMENT                       
ACTIVE AFTER DELETE POSITION 0 
as
begin
  delete from equipment_parts 
    where equipment_no = old.equipment_no;
  delete from service_file
    where parts_equip_id = old.equipment_no
      and serv_eqp_type = 'E';
end
 ^
CREATE TRIGGER EQUIPMENT_UPDATE FOR EQUIPMENT                       
ACTIVE AFTER UPDATE POSITION 0 
as
begin
  if (new.equipment_no <> old.equipment_no) then
  begin
    update equipment_parts
      set equipment_no = new.equipment_no
      where equipment_no = old.equipment_no;
    update parts_in_out
      set equipment_no = new.equipment_no
      where equipment_no = old.equipment_no;
    update service_file
      set parts_equip_id = new.equipment_no
      where parts_equip_id = old.equipment_no
        and serv_eqp_type = 'E';
  end
end
 ^
COMMIT WORK ^
SET TERM ; ^

/* Grant permissions for this database */
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON EMCONTROL TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON EM_COMPANY TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON EQUIPMENT TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON EQUIPMENT_PARTS TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON EQUIPMENT_TYPE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON PARTS_FILE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON PARTS_IN_OUT TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON PARTS_TYPE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SERVICE_FILE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SERVICE_LINE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SERVICE_TYPE TO PUBLIC;
GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON SUPPLIER TO PUBLIC;
GRANT EXECUTE ON PROCEDURE GET_SERV_OBJ_ID TO PUBLIC;
GRANT EXECUTE ON PROCEDURE GET_SERV_OBJ_ID TO PUBLIC;

